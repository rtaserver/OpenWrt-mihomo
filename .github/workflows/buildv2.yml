#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#
name: "Auto compile with openwrt sdk"
on:
  workflow_dispatch:

env:
  TZ: Asia/Jakarta
  mihomo: ${{ github.repository }}


jobs:
  job_build_mihomo:
    name: Build mihomo [Luci ${{ matrix.luci_ver }}]
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: 21.02
            luci_ver: 19.07
            sdk_url: https://downloads.openwrt.org/releases/21.02.5/targets/x86/64/openwrt-sdk-21.02.5-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz

          - sdk_ver: 23.05
            luci_ver: 23.05
            sdk_url: https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/openwrt-sdk-23.05.0-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
    steps:
      - name: Install packages
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache openwrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: sdk
          key: openwrt-luci-${{ matrix.luci_ver }}-x86_64

      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          wget ${{ matrix.sdk_url }}
          file_name=$(echo ${{ matrix.sdk_url }} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}" > feeds.conf
          echo "src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-${{ matrix.sdk_ver }}"  >> feeds.conf
          echo "src-git mihomo https://github.com/${{ env.mihomo }}.git;${{ github.ref_name }}" >> feeds.conf
          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_luci-app-mihomo=m" > .config
          ./scripts/feeds install -d n luci-app-mihomo
          make package/luci-app-mihomo/download -j8

      - name: Update mihomo feeds
        if: steps.cache-sdk.outputs.cache-hit == 'true'
        run: |
          cd sdk
          sed -i '6s/main/${{ github.ref_name }}/' feeds.conf
          ./scripts/feeds update mihomo
          ./scripts/feeds install luci-app-mihomo

      - name: Compile mihomo
        id: compile
        run: |
          cd sdk
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-mihomo=m" >> .config
          make defconfig
          echo "make package/luci-app-mihomo/{clean,compile} -j$(nproc)"
          make package/luci-app-mihomo/{clean,compile} -j$(nproc)
          mv bin/packages/x86_64/mihomo/ ../
          make clean
          rm .config .config.old
          rm -rf feeds/mihomo feeds/mihomo.*
          cd ../mihomo
          for i in $(ls); do mv $i luci-${{ matrix.luci_ver }}_$i; done
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: mihomo_${{ matrix.luci_ver }}
          path: ${{ env.FIRMWARE }}/mihomo/*.ipk


  job_auto_compile:
    needs: job_build_mihomo
    runs-on: ubuntu-latest
    name: build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/openwrt-sdk-23.05.0-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: aarch64_generic
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/rockchip/armv8/openwrt-sdk-23.05.0-rockchip-armv8_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa53/openwrt-sdk-23.05.0-mvebu-cortexa53_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: aarch64_cortex-a72
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa72/openwrt-sdk-23.05.0-mvebu-cortexa72_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: arm_cortex-a7
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/mediatek/mt7629/openwrt-sdk-23.05.0-mediatek-mt7629_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/sunxi/cortexa7/openwrt-sdk-23.05.0-sunxi-cortexa7_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a8_vfpv3
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/sunxi/cortexa8/openwrt-sdk-23.05.0-sunxi-cortexa8_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a9
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/bcm53xx/generic/openwrt-sdk-23.05.0-bcm53xx-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a9_neon
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/zynq/generic/openwrt-sdk-23.05.0-zynq-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a9_vfpv3-d16
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/mvebu/cortexa9/openwrt-sdk-23.05.0-mvebu-cortexa9_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: arm_cortex-a15_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/ipq806x/generic/openwrt-sdk-23.05.0-ipq806x-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz

          - platform: mips_24kc
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/ath79/generic/openwrt-sdk-23.05.0-ath79-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: mips_4kec
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/realtek/rtl838x/openwrt-sdk-23.05.0-realtek-rtl838x_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: mips_mips32
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/bcm63xx/generic/openwrt-sdk-23.05.0-bcm63xx-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: mipsel_24kc
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/ramips/rt288x/openwrt-sdk-23.05.0-ramips-rt288x_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: mipsel_74kc
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/ramips/rt3883/openwrt-sdk-23.05.0-ramips-rt3883_gcc-12.3.0_musl.Linux-x86_64.tar.xz

          - platform: mipsel_mips32
            url_sdk: https://downloads.openwrt.org/releases/23.05.0/targets/bcm47xx/generic/openwrt-sdk-23.05.0-bcm47xx-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz

    steps:
      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "install packages!!!!!!"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: ${{ matrix.platform }} sdk download
        run: |
          wget ${{ matrix.url_sdk }}
          file_name=$(echo ${{matrix.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.13
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      - name: ${{ matrix.platform }} feeds configuration packages
        run: |
          cd sdk
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-23.05" > feeds.conf
          echo "src-git packages https://github.com/openwrt/packages.git;openwrt-23.05" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-23.05" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-23.05"  >> feeds.conf
          echo "src-git mihomo https://github.com/${{ env.mihomo }}.git;main" >> feeds.conf

          ./scripts/feeds update -a
          ./scripts/feeds install mihomo

          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 22.x feeds/packages/lang/golang

          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          echo "CONFIG_PACKAGE_mihomo=m" >> .config

          make defconfig


      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          make download -j8
          find dl -size -1024c -exec ls -l {} \;

      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          for package in $(ls feeds/mihomo); do
              if [ -d "feeds/mihomo/$package" ]; then
                  make package/feeds/mihomo/$package/compile -j$(nproc) 2>/dev/null
              fi
          done

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          mkdir upload

          zip -jr upload/mihomo_ipk_${{ matrix.platform }}.zip bin/packages/*/mihomo/*.ipk

          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: mihomo_${{ matrix.platform }}
          path: ${{ env.FIRMWARE }}/upload/*